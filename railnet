-- Railnet manager
-- by Tastyfish

os.loadAPI "/extlib/dev"
os.loadAPI "/extlib/gui"
os.loadAPI "/extlib/db"

local railDB = db.openOrCreate("/railnet.db", {name="string", dest="string", description="string", usage="number"})
local screen = dev.get("monitor")
local printer = dev.get("ticketmachine")

local screenW, screenH
function setScale(scale)
	screen.setTextScale(scale)
	screenW, screenH = screen.getSize()
	screenW = math.floor(screenW / 2) * 2
	screenH = math.floor(screenH / 2) * 2
end
setScale(1.5)
local page = 1
local pageSize = screenH - 6
local printTimer, countdownTimer
local ticketDest, countdown

local function getDestinations(page)
	return railDB:query():sortByDescending("usage"):skip((page - 1) * pageSize):take(pageSize)
end

---- Forms ---
local downScreen, destScreen, printScreen, countdownScreen

---- Down Screen ----
gui.newLabel{
	text = "Out of Order",
	color = colors.yellow,
	bounds = rect.new(1, 1, screenW, screenH)
}
downScreen = gui.finishForm()

---- Destination Selection Screen ----
gui.newLabel{
	text = "ICing Destination Selection",
	color = colors.cyan,
	bounds = rect.new(1, 1, screenW, 1)
}
local destList = gui.newListBox{
	bounds = rect.new(1, 3, screenW, pageSize),
	select = function()
		ticketDest = listBox.items[listBox.selectedItem]
		gui.setForm(screen, printScreen)
	end,
}
local pageNumber = gui.newLabel{
	text = "x",
	bounds = rect.new(screenW / 2 - 1, screenH, 4, 1),
	color = colors.yellow
}
local function updateList()
	pageLabel.text = tostring(page)
	pageLabel:draw(screen)
	destList.items = getDestinations(page):select(function(e)
		if e.description and #e.description > 0 then
			return ("%20s: %s"):format(e.name, e.description)
		else
			return ("%20s"):format(e.name)
		end
	end)
	destList:draw(screen)
end
gui.newButton{
	text = "< Prev",
	bounds = rect.new(2, screenH, screenW / 2 - 3, 1),
	click = function()
		if page <= 1 then
			return
		end
		page = page - 1
		updateList()
	end
}
gui.newButton{
	text = "Next >",
	bounds = rect.new(screenW / 2 + 3, screenH, screenW / 2 - 3, 1),
	click = function()
		page = page + 1
		updateList()
	end
}
destScreen = gui.finishForm(function()
	page = 1
	updateList()
	if #destList.item == 0 then
		gui.setForm(downScreen)
	end
end)

---- Printing Screen ----
gui.newLabel {
  text = "Printing Ticket",
  color = colors.cyan,
  bounds = rect.new(1, 1, screenW, 1)
}
local printStatusLabel = gui.newLabel {
  text = "",
  color = colors.yellow,
  bounds = rect.new(1, 3, screenW, 1)
}
gui.newButton {
  text = "Cancel",
  color = colors.red,
  highlight = colors.yellow,
  bounds = rect.new(1, 5, screenW, 3),
  click = function()
    gui.setForm(screen, destScreen)
    printTimer = nil
  end
}
function updatePrint()
	-- check paper and ink
	local paper = printer.getStackBySlot(1).qty
	local ink = printer.getStackBySlot(2).qty
	
	if paper == 0 then
		printStatusLabel.text = "TICKET ROLL EMPTY"
	elseif ink == 0 then
		printStatusLabel.text = "INK DRY"
	else
		printStatusLabel.text = "Blanks: "..paper..
			" Ink: "..(ink*100/64).."%"
	end
	gui.draw(screen)
	
	if paper > 0 and ink > 0 then
		printer.createTicket(ticketDest)
		gui.setForm(screen, countdownScreen)
	else
		printTimer = os.startTimer(1)
	end
end
printScreen = gui.finishForm(function()
	updatePrint()
end)

---- Countdown Screen ----
gui.newLabel {
  text = "Departing in",
  color = colors.white,
  bounds = rect.new(1, screenH / 2, screenW, 1)
}
local countdownLabel = gui.newLabel {
  text = "x",
  color = colors.yellow,
  bounds = rect.new(1, screenH / 2 + 1, screenW, 1)
}
function updateCountdown()
	if countdown == 1 then
		setScale(1.5)
		gui.setForm(screen, destScreen)
	else
		countdownLabel.text = tostring(countdown).." sec"
		countdownLabel:draw(screen)
		
		countdownTimer = os.createTimer(1)
		countdown = countdown - 1
	end
end
countdownScreen = gui.finishForm(function()
	countdown = 5
	setScale(2)
	
	updateCountdown()
end)

---- main program loop ----
gui.setForm(destScreen)
while true do
	local event, p1, p2, p3, p4 = os.pullEvent()
	if event == "mouse_click" or event == "monitor_touch" then
		gui.click(screen, p2, p3)
	elseif event == "mouse_drag" then
		gui.drag(screen, p2, p3)
	elseif event == "char" then
		--gui.keypress(screen, p1, true)
		if p1 == "a" then
			io.write "Name? "
			local name = io.read()
			local dest = name:gsub("%W+", "")
			io.write "Description? "
			local desc = io.read()
			io.write("Dest ("..dest..")? ")
			local destt = io.read()
			if destt ~= "" then
				dest = destt
			end
			
			-- check for collision
			local match = railDB:query():where("$name:upper() == ?:upper() or $dest:upper() == ?:upper()", name, dest):selectFirst()
			if match then
				print(("Collides with station %s."):format(match.name))
			else
				railDB:insert{name = name, description = desc, dest = dest, usage = 0}
			end
		elseif p1 == "d" then
			io.write "Name? "
			local name = io.read()
			local match = railDB:query():where("$name:upper() == ?:upper()", name):selectFirst()
			if not match then
				print("Could not find entry.")
			else
				railDB:query():where("$name == ?", name):delete()
			end
		elseif p1 == "q" then
			gui.setForm(screen, downScreen)
			shell.exit()
		end
	elseif event == "key" then
		--gui.keypress(screen, p1, false)
	elseif event == "timer" then
		if p1 == printTimer then
			updatePrint()
		elseif p1 == countdownTimer then
			updateCountdown()
		end
	end
end

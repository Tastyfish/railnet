-- Railnet manager
-- by Tastyfish

os.loadAPI "extlib/dev"
os.loadAPI "extlib/gui"
os.loadAPI "extlib/dlgs"
os.loadAPI "extlib/db"

local railDB = db.openOrCreate("/railnet.db", {name="string", dest="string", description="string", usage="number"})
local hasScreen, screen = pcall(dev.get, "monitor")
local hasPrinter, printer = pcall(dev.get, "ticketmachine")

if not hasScreen then
	screen = term.current()
end

local cxt
function setScale(scale)
	if screen.setTextScale then
		screen.setTextScale(scale)
	end
	cxt = gui.new(screen)
end
setScale(1.5)

local page = 1
local pageSize = cxt.height - 6
local ticketDest, countdown

local function getDestinations(page)
	return railDB():sortByDescending("usage"):skip((page - 1) * pageSize):take(pageSize)
end

---- Forms ---
local downScreen, destScreen, printScreen, countdownScreen

downScreen = cxt:newForm {
	widgets = {
		gui.newLabel {
			text = "Out of Order",
			color = colors.yellow,
			bounds = rect.new(1, 1, 0, 0)
		}
	}
}

---- Destination Selection Screen ----
destScreen = cxt:newForm {
	onSet = function(self)
		self.destList = self.widgets[2]
		self.pageNumber = self.widgets[3]
		
		page = 1
		self:updateList()
		if #self.destList.items == 0 then
			downScreen:show()
		end
	end,
	updateList = function(self)
		self.pageNumber.text = tostring(page)
		self.pageNumber:draw()
		self.destList.items = getDestinations(page):select("name"):values()
		--function(e)
			--if e.description and #e.description > 0 then
			--	return ("%20s: %s"):format(tostring(e.name), tostring(e.description))
			--else
			--	return ("%20s"):format(tostring(e.name))
			--end
			--return e.name
		--end)
		self.destList:draw()
	end,
	widgets = {
		dlgs.newTitleBar {
			text = "ICing Station List"
		},
		gui.newListBox {
			bounds = rect.new(1, 3, 0, pageSize),
			select = function(self)
				ticketDest = self.items[self.selectedItem]
				printScreen:show()
			end,
		},
		gui.newLabel {
			text = "x",
			bounds = rect.new(cxt.width / 2 - 1, -1, 4, 1),
			color = colors.yellow
		},
		gui.newButton {
			text = "< Prev",
			bounds = rect.new(2, -1, cxt.width / 2 - 3, 1),
			click = function(self)
				if page <= 1 then
					return
				end
				page = page - 1
				self:updateList()
			end
		},
		gui.newButton {
			text = "Next >",
			bounds = rect.new(cxt.width / 2 + 3, -1d, cxt.width / 2 - 3, 1),
			click = function()
				page = page + 1
				self:updateList()
			end
		}
	}
}

---- Printing Screen ----
gui.newLabel {
	text = "Printing Ticket",
	color = colors.cyan,
	bounds = rect.new(1, 1, screenW, 1)
}
local printStatusLabel = gui.newLabel {
	text = "",
	color = colors.yellow,
	bounds = rect.new(1, 3, screenW, 1)
}
gui.newButton {
	text = "Cancel",
	color = colors.red,
	highlight = colors.yellow,
	bounds = rect.new(1, 5, screenW, 3),
	click = function()
		gui.setForm(screen, destScreen)
	end
}
function updatePrint()
	-- check paper and ink
	local paper, ink
	if printer.getStackInSlot(1) then
		paper = printer.getStackInSlot(1).qty
	else
		paper = 0
	end
	if printer.getStackInSlot(2) then
		ink = printer.getStackInSlot(2).qty
	else
		ink = 0
	end
	
	if paper == 0 then
		printStatusLabel.text = "TICKET ROLL EMPTY"
	elseif ink == 0 then
		printStatusLabel.text = "INK DRY"
	else
		printStatusLabel.text = "P: "..paper..
			" I: "..(ink*100/64).."%"
	end
	gui.draw(screen)
	
	if paper > 0 and ink > 0 then
		printer.createTicket(ticketDest)
		gui.setForm(screen, countdownScreen)
	else
		gui.newTimer(1, updatePrint)
	end
end
printScreen = gui.finishForm(function()
	updatePrint()
end)

---- Countdown Screen ----
gui.newLabel {
	text = "Departing in",
	color = colors.white,
	bounds = rect.new(1, screenH / 2, screenW, 1)
}
local countdownLabel = gui.newLabel {
	text = "x",
	color = colors.yellow,
	bounds = rect.new(1, screenH / 2 + 1, screenW, 1)
}
function updateCountdown()
	if countdown == 1 then
		setScale(1.5)
		gui.setForm(screen, destScreen)
	else
		countdownLabel.text = tostring(countdown).." sec"
		countdownLabel:draw(screen)
		
		gui.newTimer(1, updateCountdown)
		countdown = countdown - 1
	end
end
countdownScreen = gui.finishForm(function()
	countdown = 5
	setScale(2)
	
	updateCountdown()
end)

local function addDest()
	io.write "Name? "
	local name = io.read()
	local dest = name:gsub("%W+", "")
	io.write "Description? "
	local desc = io.read()
	io.write("Dest ("..dest..")? ")
	local destt = io.read()
	if destt ~= "" then
		dest = destt
	end
	
	-- check for collision
	local match = railDB("$name:upper() == ?:upper() or $dest:upper() == ?:upper()", name, dest):selectFirst()
	if match then
		print(("Collides with station %s."):format(match.name))
	else
		railDB:insert{name = name, description = desc, dest = dest, usage = 0}
	end
	updateList()
end

local function deleteDest()
	io.write "Name? "
	local name = io.read()
	local match = railDB("$name:upper() == ?:upper()", name):selectFirst()
	if not match then
		print("Could not find entry.")
	else
		railDB:query():where("$name == ?", name):delete()
	end
end

local function editDest()
	io.write "Old name? "
	local name = io.read()
	local match = railDB("$name:upper() == ?:upper()", name):selectFirst()
	
	if not match then
		print("Could not find entry.")
		return
	end
	
	io.write("Name("..match.name..")? ")
	local name = io.read()
	if #name == 0 then name = match.name end
	
	io.write("Description("..match.description..")? ")
	local desc = io.read()
	if #desc == 0 then desc = match.description end
	
	io.write("Dest ("..match.dest..")? ")
	local dest = io.read()
	if #dest == 0 then dest = match.dest end
	
	railDB("$name==?", match.name):update{name = name, description = desc, dest = dest}
	updateList()
end

---- main program loop ----
gui.setForm(screen, destScreen)

gui.run(screen, {
	char = function(c)
		if c == "a" then
			addDest()
		elseif c == "d" then
			deleteDest()
		elseif c == "e" then
			editDest()
		elseif c == "q" then
			gui.setForm(screen, downScreen)
			gui.stop()
		end
	end
})